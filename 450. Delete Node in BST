class Solution {
public:
    // iop function
    TreeNode* iop(TreeNode* root) {
        TreeNode* pred = root->left;
        while (pred && pred->right) pred = pred->right;
        return pred;
    }

    // ios function
    TreeNode* ios(TreeNode* root) {
        TreeNode* succ = root->right;
        while (succ && succ->left) succ = succ->left;
        return succ;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return NULL;
      if(root->val==key){
        // c1 : leaf node
        if(root->left==NULL && root->right==NULL) return NULL;
        // c2 : 1 child
        if(root->left==NULL || root->right==NULL){
            if(root->left!=NULL) return root->left;
            else return root->right;
        }
        // c3 : two child
        if(root->left && root->right){
            TreeNode* pred = iop(root);
            root->val = pred->val;
            root->left = deleteNode(root->left,pred->val);
        }
      } 
      else if(root->val > key){
        root->left = deleteNode(root->left,key);
      } 
      else {
        root->right = deleteNode(root->right,key);
      }
      return root;
    }
};
